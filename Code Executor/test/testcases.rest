### Correct input, print statement
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "print('2')"
}

### Correct input, addition

POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "h = 1 + 1; print(h)"
}

### Wrong input, no semicolon for separation indication

POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "h = 1 + 1 print(h)"
}

### Correct input, use newline for separation
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "h = 1 + 1\nprint(h)"
}

### Correct input, get square root of 64, use of import statements -> math
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "import math\nx = math.sqrt(64)\nprint(x)"
}

### Correct input, import panda does not work as module not downloaded
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "import panda"
}

### Correct input, multiple print statements
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "print('hello')\nprint('world')\nprint('my')\nprint('name')\nprint('is')\nprint('bob')"
}

### Correct input, with function fibonacci
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "def fib(n):\n if n == 0:\n    return n\n elif n == 1 or n == 2:\n    return 1\n else:\n     return fib(n - 1) + fib(n - 2)\nprint(fib(10))"
}

### Correct input, with function fibonacci, multiple print statements
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "def fib(n):\n if n == 0:\n    return n\n elif n == 1 or n == 2:\n    return 1\n else:\n    print(n)\n    return fib(n - 1) + fib(n - 2)\nprint(fib(10))"
}


### Correct input, with function fibonacci, big input, time exceeded
POST /code-executor HTTP/1.1
Host: localhost:8080
Content-Type: application/json

{
  "code": "def fib(n):\n if n == 0:\n    return n\n elif n == 1 or n == 2:\n    return 1\n else:\n     return fib(n - 1) + fib(n - 2)\nprint(fib(100))"
}
